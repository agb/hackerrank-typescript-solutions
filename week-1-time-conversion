'use strict';

import { WriteStream, createWriteStream } from "fs";
process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString: string = '';
let inputLines: string[] = [];
let currentLine: number = 0;

process.stdin.on('data', function(inputStdin: string): void {
    inputString += inputStdin;
});

process.stdin.on('end', function(): void {
    inputLines = inputString.split('\n');
    inputString = '';

    main();
});

function readLine(): string {
    return inputLines[currentLine++];
}

/*
 * Complete the 'timeConversion' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

function timeConversion(s: string): string {
    
    const isPM = s.match("PM");
    
    return(isPM ? pmConverter(s) : amConverter(s))
}

function pmConverter(time:string):string {
    const date = stringToDateType(time);
    const hours = date.getHours()
    const minutes = date.getMinutes();
    const seconds = date.getSeconds();

    const militaryHoursView = hours !== 12 ? hours+12 : 12; 

    return `${militaryHoursView}:${minutes}:${seconds}`;
}

function amConverter(time:string):string {
    const date = stringToDateType(time);
    const hours = date.getHours() === 12 ? 0 : date.getHours();
    const minutes = date.getMinutes();
    const seconds = date.getSeconds();

    const militaryHoursView = hours === 0 ? '00' : (hours+12)

    return `${militaryHoursView}:${minutes}:${seconds}`;
}



function stringToDateType(time:string):Date {
    const withouthAmOrPmTime = time.replace(time,"AM|PM")
    
    return new Date(withouthAmOrPmTime);
}

function main() {
    const ws: WriteStream = createWriteStream(process.env['OUTPUT_PATH']);

    const s: string = readLine();

    const result: string = timeConversion(s);

    ws.write(result + '\n');

    ws.end();
}
